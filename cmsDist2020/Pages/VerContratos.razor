@page "/vercontratos/{IdProducto:int}/{Id:int}"
@using cmsDist2020.Models
@inject cmsDist2020.Data.AppData AppData
@inject cmsDist2020.Service.ClientesAddService clientesAddService
@inject NavigationManager navigationManager

<h3>Ver Contratos</h3>
@if (clienteSelectModel == null)
{
    <img src="./Img/cargando.gif" />
}
else
{
<EditForm Model="contratoModel" OnValidSubmit="CrearContratos">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="form-group col-md-10">

            <div class="form-group">
                <label>Cliente:</label>
                <InputSelect disabled=@_enable_ class="form-control"
                             @bind-Value="@contratoModel.IdCliente">
                    <option value="">--Seleccione un Cliente--</option>
                    @foreach (var item in clienteSelectModel)
                        {
                        @if (item.IdClienteselect == contratoModel.IdCliente)
                            {
                            <option selected value="@item.IdClienteselect">@item.NombreCliente</option>
                            }
                            else
                            {
                            <option value="@item.IdClienteselect">@item.NombreCliente</option>
                            }
                        }
                </InputSelect>
            </div>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-10">
            <div class="form-group">
                <label>Colaborador:</label>
                <InputSelect class="form-control" @bind-Value="@contratoModel.IdColaborador">
                    <option value="">--Seleccione un Colaborador--</option>
                    @foreach (var item in colaboradorSelectModel)
                        {
                        @if (item.IdColaboradorSelect == contratoModel.IdColaborador)
                            {
                            <option selected value="@item.IdColaboradorSelect">@item.NombreColaborador</option>
                            }
                            else
                            {
                            <option value="@item.IdColaboradorSelect">@item.NombreColaborador</option>
                            }
                        }
                </InputSelect>
            </div>
        </div>
    </div>
            <div class="form-row">
                <div class="form-group col-md-2">
                    <div class="form-group">
                        <label>N° Contrato:</label>
                        <div>
                            <InputText disabled=@_enable_ class="form-control" @bind-Value="@contratoModel.NroContrato" />
                            <ValidationMessage For="@(() => contratoModel.NroContrato)" />
                        </div>
                    </div>
                </div>
                <div class="form-group col-md-2">
                    <div class="form-group">
                        <label>N° Cuotas:</label>
                        <div>
                            <InputNumber class="form-control" @bind-Value="@contratoModel.NroCuotas" />
                            <ValidationMessage For="@(() => contratoModel.NroCuotas)" />
                        </div>
                    </div>
                </div>
            </div>
            <MatButton Disabled="false" Raised="true" type="submit" name="action">GRABAR CONTRATO</MatButton>
            <MatButton Raised="true" OnClick="@retornar">CANCELAR</MatButton>
</EditForm>
}
@code {

    [Parameter]
    public int IdProducto { get; set; }
    [Parameter]
    public int Id { get; set; }

    ContratoModel contratoModel = new ContratoModel();

    public List<ClienteSelectModel> clienteSelectModel;
    public List<ColaboradorSelectModel> colaboradorSelectModel;
    public Boolean _enable_ = false;

    protected override async Task OnInitializedAsync()
    {
        clienteSelectModel = await clientesAddService.ReadClientes(AppData.Id);
        colaboradorSelectModel = await clientesAddService.ReadColaboradores(AppData.Id);
        if (Id != 0)
        {
            contratoModel = await clientesAddService.GetContratoId(Id);
            if (contratoModel.EstadoPin == "1")
            {
                _enable_ = false;
            }
            else
            {
                _enable_ = true;
            }
        }
        else
        {
            contratoModel.Id = 0;
        }
    }


    async Task CrearContratos()
    {
        bool Saved = false;
        try
        {
            if (Id == 0)
            {
                contratoModel.IdDistribuidor = AppData.Id;
                contratoModel.IdProducto = IdProducto;
            }
            Saved = await clientesAddService.SaveContratos(Id, contratoModel);
            if (Saved)
            {
                navigationManager.NavigateTo("/contratos/" + IdProducto.ToString());
            }
            else
            {
                Console.WriteLine("No se ha grabado los datos");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            Console.WriteLine("Ejecutando");
        }
    }

    private void retornar()
    {
        navigationManager.NavigateTo("/contratos/" + IdProducto.ToString());
    }

}
